knitr::opts_chunk$set(echo = TRUE)
library('mlbench')
data(Zoo) # load up an R DataFrame
head(Zoo) # print part of it from R
# load up some zoo data
data(Zoo)
library(arules)
# make the "legs" attirbute binary
has_legs <- Zoo["legs"]>0
Zoo[["legs"]] <- as.factor(has_legs)
str(Zoo)
# convert to transactions, where column indicates the output of the attribute
# so "hair" as an attribute would generate two columns -> "hair=TRUE and hair=FALSE"
trans <- as(Zoo, "transactions")
str(trans)
# What does trans contain?
trans@itemInfo # Conumns (one hot encoded)
trans@itemsetInfo # Observation labels
# Now that we have transactions, its time to run the apriori algorithm
# This returns the itemsets
isets <- apriori(trans, parameter=list(target="frequent", support=0.5))
# Basic information in isets
isets # there are 21 item sets
isets@quality # This lists the support for each item set
# sort it and display some of the frequent itemsets from apriori
isets <- arules::sort(isets, by="support")  # Note this is not base sort, it is a sort function in the library arules
inspect(head(isets, n=10))
length(isets)
# Do same thing, getting only the maximal sets
is_max <- isets[is.maximal(isets)]
inspect(head(arules::sort(is_max, by="support")))
length(is_max)
# generate some rules from the frequent itemsets
rules <- apriori(trans, parameter=list(support=.5, confidence=.9))
head(rules, n=10) # just states that there are 10 rules (use inspect to see rules)
inspect(head(rules, n=10)) # inspect is an arules function to display rules in readable format
# print out measures of rule quality (also available from the inspect function above)
quality(head(rules))
# sort out the rules and print additional "interest" measures
rules <- sort(rules, by="lift")
inspect(head(rules, n=10))
interestMeasure(rules[1:10], measure=c("phi", "gini"), trans=trans)
install.packages(arulesViz)
install.packages(arulesViz)
install.packages("arulesViz")
# visualize the different rules,
#  the first visualization might take some time to render properly
library(arulesViz)
install.packages("jsonlite")
# visualize the different rules,
#  the first visualization might take some time to render properly
library(arulesViz)
install.packages("arulesViz")
remove.packages("arulesViz")
install.packages("arulesViz")
# visualize the different rules,
#  the first visualization might take some time to render properly
library(arulesViz)
install.packages("arulesViz", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
install.packages("arulesViz", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"), dependencies = TRUE)
# visualize the different rules,
#  the first visualization might take some time to render properly
library(arulesViz)
remove.packages(c("arulesViz"))
install.packages("arulesViz",dependencies = TRUE)
# visualize the different rules,
#  the first visualization might take some time to render properly
library(arulesViz)
arulesViz::plot(rules)
remove.packages(c("arulesViz","jsonlite"))
install.packages("arulesViz",dependencies = TRUE)
# visualize the different rules,
#  the first visualization might take some time to render properly
library(arulesViz)
# visualize the different rules,
#  the first visualization might take some time to render properly
library(arulesViz)
library("arulesViz", lib.loc="~/R/win-library/3.5")
# visualize the different rules,
#  the first visualization might take some time to render properly
library(arulesViz)
# visualize the different rules,
#  the first visualization might take some time to render properly
library(arulesViz)
# visualize the different rules,
#  the first visualization might take some time to render properly
library(arulesViz)
remove.packages("arulesViz")
install_github("mhahsler/arulesViz")
library("devtools")
install_github("mhahsler/arulesViz")
install_github("mhahsler/arulesViz")
install_github("mhahsler/arulesViz")
install_github("mhahsler/arulesViz")
install.packages("arulesViz")
# visualize the different rules,
#  the first visualization might take some time to render properly
library(arulesViz)
library(arulesViz)
install.packages("jsonlite")
remove.packages("jsonlite")
install.packages("jsonlite")
Sys.getenv("R_LIBS_USER")
library(pacman)
install.packages("arulesViz")
install.packages("arulesViz", dependencies = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# visualize the different rules,
#  the first visualization might take some time to render properly
library(arulesViz)
remove.packages("arulesViz")
install.packages("arulesViz", dependencies = TRUE)
install.packages("graph")
install.packages("RgraphViz")
source("http://bioconductor.org/biocLite.R")
biocLite("Rgraphviz")
# visualize the different rules,
#  the first visualization might take some time to render properly
library(arulesViz)
biocLite("digest")
biocLite("digest")
knitr::opts_chunk$set(echo = TRUE)
# visualize the different rules,
#  the first visualization might take some time to render properly
library(arulesViz)
biocLite("colorspace")
source("http://bioconductor.org/biocLite.R")
biocLite("colorspace")
# visualize the different rules,
#  the first visualization might take some time to render properly
library(arulesViz)
install.packages("caTools")
# visualize the different rules,
#  the first visualization might take some time to render properly
library(arulesViz)
install.packages("Rccp")
biocLite("Rcpp")
biocLite("Rcpp")
# visualize the different rules,
#  the first visualization might take some time to render properly
library(arulesViz)
biocLite("lazyeval")
# visualize the different rules,
#  the first visualization might take some time to render properly
library(arulesViz)
plot(rules)
# visualize the different rules,
#  the first visualization might take some time to render properly
# Potential Installation issues
# https://stackoverflow.com/questions/18023300/is-rgraphviz-no-longer-available-for-r
# source("http://bioconductor.org/biocLite.R")
# biocLite("Rgraphviz") # replace the library name with the one that is missing
library(arulesViz)
plot(rules)
plot(rules)
# a great plot
plot(rules, method="grouped")
inspect(rules)
length(rules)
# a great plot
plot(rules, method="grouped")
inspect(rules)
length(rules)
# a great plot
plot(rules, method="grouped")
inspect(rules)
length(rules)
# a great plot
plot(rules, method="grouped")
inspect(rules)
length(rules)
# a great plot
plot(rules, method="grouped")
inspect(rules)
length(rules)
# a great plot
plot(rules, method="grouped")
inspect(rules)
length(rules)
# a great plot
plot(rules, method="grouped")
inspect(rules)
length(rules)
# a great plot
plot(rules, method="grouped")
inspect(rules)
length(rules)
# a great plot
plot(rules, method="grouped")
inspect(rules)
length(rules)
# a great plot
plot(rules, method="grouped")
inspect(rules)
length(rules)
# a great plot
plot(rules, method="grouped")
inspect(rules)
length(rules)
# a great plot
plot(rules, method="grouped")
inspect(rules)
length(rules)
# An extended example using titanic data
# http://www.rdatamining.com/examples/association-rules
load("ICA5-PartA/titanic2.raw.rdata")
# An extended example using titanic data
# http://www.rdatamining.com/examples/association-rules
load("data/titanic.csv")
# An extended example using titanic data
# http://www.rdatamining.com/examples/association-rules
load("ICA5/ICA5-PartA/titanic2.raw.rdata")
rules <- apriori(titanic.raw,parameter = list(minlen=2, supp=0.005, conf=0.8), appearance = list(rhs=c("Survived=No", "Survived=Yes"), default="lhs"), control = list(verbose=F))
rules.sorted <- sort(rules, by="lift")
plot(rules.sorted, method="grouped")
inspect(rules.sorted, n=10)
# a great plot
plot(rules, method="grouped")
inspect(rules)
length(rules)
# a great plot
plot(rules, method="grouped")
inspect(rules)
length(rules)
# a great plot
plot(rules, method="grouped")
inspect(rules)
length(rules)
# a great plot
plot(rules, method="grouped")
inspect(rules)
length(rules)
install.packages("matrix")
install.packages("Matrix")
install.packages("Matrix")
knitr::opts_chunk$set(echo = TRUE)
# a great plot
plot(rules, method="grouped")
knitr::opts_chunk$set(echo = TRUE)
library('mlbench')
data(Zoo) # load up an R DataFrame
head(Zoo) # print part of it from R
# load up some zoo data
data(Zoo)
library(arules)
# make the "legs" attirbute binary
has_legs <- Zoo["legs"]>0
Zoo[["legs"]] <- as.factor(has_legs)
str(Zoo)
# convert to transactions, where column indicates the output of the attribute
# so "hair" as an attribute would generate two columns -> "hair=TRUE and hair=FALSE"
trans <- as(Zoo, "transactions")
str(trans)
# What does trans contain?
trans@itemInfo # Conumns (one hot encoded)
trans@itemsetInfo # Observation labels
# Now that we have transactions, its time to run the apriori algorithm
# This returns the itemsets
isets <- apriori(trans, parameter=list(target="frequent", support=0.5))
# Basic information in isets
isets # there are 21 item sets
isets@quality # This lists the support for each item set
# sort it and display some of the frequent itemsets from apriori
isets <- arules::sort(isets, by="support")  # Note this is not base sort, it is a sort function in the library arules
inspect(head(isets, n=10))
length(isets)
# Do same thing, getting only the maximal sets
is_max <- isets[is.maximal(isets)]
inspect(head(arules::sort(is_max, by="support")))
length(is_max)
# generate some rules from the frequent itemsets
rules <- apriori(trans, parameter=list(support=.5, confidence=.9))
head(rules, n=10) # just states that there are 10 rules (use inspect to see rules)
inspect(head(rules, n=10)) # inspect is an arules function to display rules in readable format
# print out measures of rule quality (also available from the inspect function above)
quality(head(rules))
# sort out the rules and print additional "interest" measures
rules <- sort(rules, by="lift")
inspect(head(rules, n=10))
interestMeasure(rules[1:10], measure=c("phi", "gini"), trans=trans)
# visualize the different rules,
#  the first visualization might take some time to render properly
# Potential Installation issues
# https://stackoverflow.com/questions/18023300/is-rgraphviz-no-longer-available-for-r
# source("http://bioconductor.org/biocLite.R")
# biocLite("Rgraphviz") # replace the library name with the one that is missing
library(arulesViz)
plot(rules)
# a great plot
plot(rules, method="grouped")
inspect(rules)
length(rules)
# An extended example using titanic data
# http://www.rdatamining.com/examples/association-rules
load("ICA5/ICA5-PartA/titanic2.raw.rdata")
rules <- apriori(titanic.raw,parameter = list(minlen=2, supp=0.005, conf=0.8), appearance = list(rhs=c("Survived=No", "Survived=Yes"), default="lhs"), control = list(verbose=F))
rules.sorted <- sort(rules, by="lift")
plot(rules.sorted, method="grouped")
inspect(rules.sorted, n=10)
# Potential Installation issues
# https://stackoverflow.com/questions/18023300/is-rgraphviz-no-longer-available-for-r
# source("http://bioconductor.org/biocLite.R")
# biocLite("Rgraphviz") # replace the library name with the one that is missing
require("pacman")
pacman::p_load(mlbench,arules,arulesViz)
?transactions
# Now that we have transactions, its time to run the apriori algorithm
# apriori --> This mines and returns the frequent itemsets, association rules or association hyperedges using the Apriori algorithm
# parameter: object of class APparameter or named list. The default behavior is to mine rules with minimum support of 0.1, minimum confidence of 0.8, maximum of 10 items (maxlen), and a maximal time for subset checking of 5 seconds (maxtime).
isets <- apriori(trans, parameter=list(target="frequent", support=0.5))
knitr::opts_chunk$set(echo = TRUE)
# Potential Installation issues
# https://stackoverflow.com/questions/18023300/is-rgraphviz-no-longer-available-for-r
# source("http://bioconductor.org/biocLite.R")
# biocLite("Rgraphviz") # replace the library name with the one that is missing
require("pacman")
pacman::p_load(mlbench,arules,arulesViz)
library('mlbench')
data(Zoo) # load up an R DataFrame
head(Zoo) # print part of it from R
# load up some zoo data
data(Zoo)
# make the "legs" attirbute binary
has_legs <- Zoo["legs"]>0
Zoo[["legs"]] <- as.factor(has_legs)
str(Zoo)
# convert to transactions, where column indicates the output of the attribute
# so "hair" as an attribute would generate two columns -> "hair=TRUE and hair=FALSE"
# basically converting the dataframe into a new class objecr of type "transactions". This type is defined in the arules library
trans <- as(Zoo, "transactions")
str(trans)
# What does trans contain?
trans@itemInfo # Columns (one hot encoded)
head(trans@itemsetInfo) # Observation labels
# Now that we have transactions, its time to run the apriori algorithm
# apriori --> This mines and returns the frequent itemsets, association rules or association hyperedges using the Apriori algorithm
# (1) parameter: object of class APparameter or named list. The default behavior is to mine rules with minimum support of 0.1, minimum confidence of 0.8, maximum of 10 items (maxlen), and a maximal time for subset checking of 5 seconds (maxtime).
# (2) target="frequent" gets the frequent itemsets
isets <- apriori(trans, parameter=list(target="frequent", support=0.5))
# Basic information in isets
isets # there are 21 item sets
isets@quality # This lists the support for each item set
# sort it and display some of the frequent itemsets from apriori
isets <- arules::sort(isets, by="support")  # Note this is not base sort, it is a sort function in the library arules
inspect(head(isets, n=10))
length(isets)
# Do same thing, getting only the maximal sets
is_max <- isets[is.maximal(isets)]
inspect(head(arules::sort(is_max, by="support")))
length(is_max)
# generate some rules from the frequent itemsets
rules <- apriori(trans, parameter=list(support=.5, confidence=.9))
head(rules, n=10) # just states that there are 10 rules (use inspect to see rules)
inspect(head(rules, n=10)) # inspect is an arules function to display rules in readable format
# print out measures of rule quality (also available from the inspect function above)
quality(head(rules))
# sort out the rules and print additional "interest" measures
rules <- sort(rules, by="lift")
inspect(head(rules, n=10))
interestMeasure(rules[1:10], measure=c("phi", "gini"), trans=trans)
# visualize the different rules,
#  the first visualization might take some time to render properly
plot(rules)
# a great plot
plot(rules, method="grouped")
inspect(rules)
length(rules)
# An extended example using titanic data
# http://www.rdatamining.com/examples/association-rules
load("ICA5/ICA5-PartA/titanic2.raw.rdata")
rules <- apriori(titanic.raw,parameter = list(minlen=2, supp=0.005, conf=0.8), appearance = list(rhs=c("Survived=No", "Survived=Yes"), default="lhs"), control = list(verbose=F))
rules.sorted <- sort(rules, by="lift")
plot(rules.sorted, method="grouped")
inspect(rules.sorted, n=10)
knitr::opts_chunk$set(echo = TRUE)
# Potential Installation issues
# https://stackoverflow.com/questions/18023300/is-rgraphviz-no-longer-available-for-r
# source("http://bioconductor.org/biocLite.R")
# biocLite("Rgraphviz") # replace the library name with the one that is missing
require("pacman")
pacman::p_load(mlbench,arules,arulesViz)
data(Zoo) # load up an R DataFrame
head(Zoo) # print part of it from R
# load up some zoo data
data(Zoo)
# make the "legs" attirbute binary
has_legs <- Zoo["legs"]>0
Zoo[["legs"]] <- as.factor(has_legs)
str(Zoo)
# convert to transactions, where column indicates the output of the attribute
# so "hair" as an attribute would generate two columns -> "hair=TRUE and hair=FALSE"
# basically converting the dataframe into a new class objecr of type "transactions". This type is defined in the arules library
trans <- as(Zoo, "transactions")
str(trans)
# What does trans contain?
trans@itemInfo # Columns (one hot encoded)
head(trans@itemsetInfo) # Observation labels
# Now that we have transactions, its time to run the apriori algorithm
# apriori --> This mines and returns the frequent itemsets, association rules or association hyperedges using the Apriori algorithm
# (1) parameter: object of class APparameter or named list. The default behavior is to mine rules with minimum support of 0.1, minimum confidence of 0.8, maximum of 10 items (maxlen), and a maximal time for subset checking of 5 seconds (maxtime).
# (2) target="frequent" gets the frequent itemsets
isets <- apriori(trans, parameter=list(target="frequent", support=0.5))
# Basic information in isets
isets # there are 21 item sets
isets@quality # This lists the support for each item set
# sort it and display some of the frequent itemsets from apriori
isets <- arules::sort(isets, by="support")  # Note this is not base sort, it is a sort function in the library arules
inspect(head(isets, n=10))
length(isets)
# Do same thing, getting only the maximal sets
is_max <- isets[is.maximal(isets)]
inspect(head(arules::sort(is_max, by="support")))
length(is_max)
# generate some rules from the frequent itemsets
rules <- apriori(trans, parameter=list(support=.5, confidence=.9))
head(rules, n=10) # just states that there are 10 rules (use inspect to see rules)
inspect(head(rules, n=10)) # inspect is an arules function to display rules in readable format
# print out measures of rule quality (also available from the inspect function above)
quality(head(rules))
# sort out the rules and print additional "interest" measures
rules <- sort(rules, by="lift")
inspect(head(rules, n=10))
interestMeasure(rules[1:10], measure=c("phi", "gini"), trans=trans)
plot(rules) # uses plot function from arules library
# a great plot
plot(rules, method="grouped")
inspect(rules)
length(rules)
load("ICA5/ICA5-PartA/titanic2.raw.rdata")
rules <- apriori(titanic.raw,parameter = list(minlen=2, supp=0.005, conf=0.8), appearance = list(rhs=c("Survived=No", "Survived=Yes"), default="lhs"), control = list(verbose=F))
rules.sorted <- sort(rules, by="lift")
plot(rules.sorted, method="grouped")
inspect(rules.sorted, n=10)
